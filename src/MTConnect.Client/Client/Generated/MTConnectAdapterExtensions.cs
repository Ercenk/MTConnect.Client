// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace MTConnect.Client
{
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MTConnectAdapter.
    /// </summary>
    public static partial class MTConnectAdapterExtensions
    {
            /// <summary>
            /// Lists this Agent’s devices and all the devices’ components and data items
            /// being collected
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Stream Probe(this IMTConnectAdapter operations)
            {
                return operations.ProbeAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists this Agent’s devices and all the devices’ components and data items
            /// being collected
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> ProbeAsync(this IMTConnectAdapter operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ProbeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Lists this Agents devices and all the devices components and data items
            /// being collected
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Stream ProbeDevice(this IMTConnectAdapter operations)
            {
                return operations.ProbeDeviceAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists this Agents devices and all the devices components and data items
            /// being collected
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> ProbeDeviceAsync(this IMTConnectAdapter operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ProbeDeviceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Retrieve the values for a component.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Stream Sample(this IMTConnectAdapter operations)
            {
                return operations.SampleAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the values for a component.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> SampleAsync(this IMTConnectAdapter operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.SampleWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Retrieve the values for a component
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Stream DeviceSample(this IMTConnectAdapter operations)
            {
                return operations.DeviceSampleAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the values for a component
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> DeviceSampleAsync(this IMTConnectAdapter operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.DeviceSampleWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Retrieve the values for a component
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Stream Current(this IMTConnectAdapter operations)
            {
                return operations.CurrentAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the values for a component
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> CurrentAsync(this IMTConnectAdapter operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.CurrentWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Retrieve the values for a component
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Stream DeviceCurrent(this IMTConnectAdapter operations)
            {
                return operations.DeviceCurrentAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the values for a component
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> DeviceCurrentAsync(this IMTConnectAdapter operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.DeviceCurrentWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Retrieve the available assets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Stream Assets(this IMTConnectAdapter operations)
            {
                return operations.AssetsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the available assets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> AssetsAsync(this IMTConnectAdapter operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.AssetsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Retrieve the available assets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Stream AssetDetails(this IMTConnectAdapter operations)
            {
                return operations.AssetDetailsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the available assets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> AssetDetailsAsync(this IMTConnectAdapter operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.AssetDetailsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

    }
}
